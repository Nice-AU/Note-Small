/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package onlynote;

//import com.inet.jortho.SpellChecker;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

import java.awt.Font;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.StringReader;
import java.net.URI;
import java.text.MessageFormat;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.LookAndFeel;
import javax.swing.SwingUtilities;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.UndoableEditEvent;
import javax.swing.plaf.synth.SynthFormattedTextFieldUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import src.com.inet.jorth.FileUserDictionary;
import src.com.inet.jorth.PopupListener;
import src.com.inet.jorth.SpellChecker;
import src.com.inet.jorth.SpellCheckerOptions;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Arrays;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleConstants;
import javax.swing.text.View;
import javax.swing.text.ViewFactory;
import javax.swing.text.html.HTML;
import javax.swing.text.html.ImageView;
import javax.swing.text.html.StyleSheet;
import net.proteanit.sql.DbUtils;
import org.drjekyll.fontchooser.FontDialog;
import org.jsoup.nodes.Entities.EscapeMode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;

/**
 *
 * @author ALAN
 */
public class Note extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    public Stage primaryStage;
    public BorderPane rootLayout;

    /**
     * Creates new form Plus_Calc_Hist
     */
    public Note() {
        initComponents();
        this.setLocationRelativeTo(null);
        conn = NewConnData.ConnecrDb();

        UIDefaults defaul = new UIDefaults();
        defaul.put("EditorPane[Enabled].backgroundPainter", new java.awt.Color(31, 31, 31));
        HistNew.putClientProperty("Nimbus.Overrides", defaul);
        HistNew.putClientProperty("Nimbus.Overrides.InheritDefaults", true);
        HistNew.setBackground(new java.awt.Color(31, 31, 31));
        //  newopen();
        Open();
        Icon();
        jScrollPane1.setVisible(false);
        jSpinner1.setVisible(false);
        jSpinner2.setVisible(false);
        Size1.setVisible(false);
        Size.setVisible(false);

        UIManager.put("nimbusBase", new java.awt.Color(31, 8, 8));
        this.setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 80, 80));
        setloadfont();
        //   Opensa();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        He = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Exit = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        ToIcon = new javax.swing.JLabel();
        Star = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        JLabImg1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        JLabImg2 = new javax.swing.JLabel();
        JLabImg = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Size = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        Size1 = new javax.swing.JLabel();
        jToggleButton12 = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        Comment = new javax.swing.JLabel();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        HistNew = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 1, 21));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Algerian", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(55, 180, 250));
        jLabel1.setText("-");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 20, 30));

        He.setBackground(new java.awt.Color(255, 255, 255));
        He.setFont(new java.awt.Font("Algerian", 1, 18)); // NOI18N
        He.setForeground(new java.awt.Color(24, 248, 112));
        He.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        He.setText("(C) NA1- Note");
        He.setToolTipText("(C) NA1 2024- Note");
        He.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HeMouseEntered(evt);
            }
        });
        jPanel1.add(He, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, 150, 60));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("-");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 10, -1, 30));

        Exit.setFont(new java.awt.Font("Berlin Sans FB", 1, 20)); // NOI18N
        Exit.setForeground(new java.awt.Color(40, 216, 248));
        Exit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Exit.setText("X");
        Exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ExitMouseExited(evt);
            }
        });
        jPanel1.add(Exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 0, 30, 50));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Algerian", 3, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(55, 180, 250));
        jLabel4.setText("+");
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 20, 30));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/File With.gif"))); // NOI18N
        jButton1.setToolTipText("Menu option & setting.");
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/File Se with.gif"))); // NOI18N
        jButton1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/File Se with.gif"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 80, 60));

        ToIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ToIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Main Top.gif"))); // NOI18N
        jPanel1.add(ToIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 50, 50));

        Star.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Only Icon.gif"))); // NOI18N
        Star.setContentAreaFilled(false);
        Star.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                StarAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jPanel1.add(Star, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 50, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, 60));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jPanel2.setBackground(new java.awt.Color(9, 31, 31));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLabImg1.setFont(new java.awt.Font("Bodoni MT", 1, 11)); // NOI18N
        JLabImg1.setForeground(new java.awt.Color(204, 204, 204));
        JLabImg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Font Book With.gif"))); // NOI18N
        JLabImg1.setText(" - Font ");
        JLabImg1.setToolTipText("You can save font size and look.");
        JLabImg1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JLabImg1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLabImg1MouseClicked(evt);
            }
        });
        jPanel2.add(JLabImg1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 130, 30));

        jLabel9.setFont(new java.awt.Font("Cooper Black", 1, 23)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Option");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 5, 120, 30));
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 70, 10));

        JLabImg2.setFont(new java.awt.Font("Bodoni MT", 1, 11)); // NOI18N
        JLabImg2.setForeground(new java.awt.Color(204, 204, 204));
        JLabImg2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Undo With.gif"))); // NOI18N
        JLabImg2.setText("  - Undo-Ctrl-Z ");
        JLabImg2.setToolTipText("Undo");
        JLabImg2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JLabImg2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLabImg2MouseClicked(evt);
            }
        });
        jPanel2.add(JLabImg2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 130, 30));

        JLabImg.setFont(new java.awt.Font("Bodoni MT", 1, 11)); // NOI18N
        JLabImg.setForeground(new java.awt.Color(204, 204, 204));
        JLabImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Image New.gif"))); // NOI18N
        JLabImg.setText("  - Image Folder ");
        JLabImg.setToolTipText("Need to keep a safe folder, otherwise, all images from notes will loose.");
        JLabImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JLabImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLabImgMouseClicked(evt);
            }
        });
        jPanel2.add(JLabImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 130, 30));

        jLabel10.setFont(new java.awt.Font("Bodoni MT", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Image New.gif"))); // NOI18N
        jLabel10.setText("  - Before add Image W/H ");
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel10AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 160, 30));

        jLabel11.setFont(new java.awt.Font("Bodoni MT Black", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 204, 204));
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Open Img.gif"))); // NOI18N
        jLabel11.setText("  - Open");
        jLabel11.setToolTipText("Open");
        jLabel11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 120, 30));

        jLabel12.setFont(new java.awt.Font("Bodoni MT Black", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Save IMG.gif"))); // NOI18N
        jLabel12.setText("  - Save As");
        jLabel12.setToolTipText("Save As");
        jLabel12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 120, 30));

        jLabel14.setFont(new java.awt.Font("Bodoni MT", 1, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(204, 204, 204));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Image New.gif"))); // NOI18N
        jLabel14.setText("  - Image Insert");
        jLabel14.setToolTipText("Necessary select a folder to save images, need to keep a safe folder.");
        jLabel14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 120, 30));

        Size.setFont(new java.awt.Font("Bodoni MT Black", 1, 11)); // NOI18N
        Size.setForeground(new java.awt.Color(204, 204, 204));
        Size.setText("Height");
        Size.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(Size, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 70, 20));

        jSpinner1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jSpinner1AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jPanel2.add(jSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 70, 30));

        jSpinner2.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jSpinner2AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });
        jPanel2.add(jSpinner2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 70, 30));

        Size1.setFont(new java.awt.Font("Bodoni MT Black", 1, 11)); // NOI18N
        Size1.setForeground(new java.awt.Color(204, 204, 204));
        Size1.setText("Width");
        Size1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(Size1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 70, 20));

        jScrollPane1.setViewportView(jPanel2);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 170, 310));

        jToggleButton12.setBackground(new java.awt.Color(1, 55, 63));
        jToggleButton12.setFont(new java.awt.Font("Bookman Old Style", 3, 14)); // NOI18N
        jToggleButton12.setForeground(new java.awt.Color(75, 217, 249));
        jToggleButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Notepad de.gif"))); // NOI18N
        jToggleButton12.setToolTipText("Dustbin");
        jToggleButton12.setContentAreaFilled(false);
        jToggleButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton12ActionPerformed(evt);
            }
        });
        jPanel3.add(jToggleButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 390, 80, -1));
        jPanel3.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 760, 10));

        Comment.setFont(new java.awt.Font("Bowlby One SC", 1, 21)); // NOI18N
        Comment.setForeground(new java.awt.Color(204, 204, 204));
        Comment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel3.add(Comment, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 400, 150, 50));

        jToggleButton4.setFont(new java.awt.Font("Bookman Old Style", 3, 21)); // NOI18N
        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Space With.gif"))); // NOI18N
        jToggleButton4.setToolTipText("Long space to save space. After use it can't use old Ctrl-z & Ctrl-Y.");
        jToggleButton4.setContentAreaFilled(false);
        jToggleButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton4MouseClicked(evt);
            }
        });
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jToggleButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 390, 80, -1));

        jToggleButton3.setFont(new java.awt.Font("Bookman Old Style", 3, 21)); // NOI18N
        jToggleButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Enter with.gif"))); // NOI18N
        jToggleButton3.setToolTipText("Enter to save enter. Use fresh after using it.");
        jToggleButton3.setContentAreaFilled(false);
        jToggleButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton3MouseClicked(evt);
            }
        });
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jToggleButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 80, -1));

        jToggleButton2.setFont(new java.awt.Font("Bookman Old Style", 3, 21)); // NOI18N
        jToggleButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Fresh With.gif"))); // NOI18N
        jToggleButton2.setToolTipText("If copy and paste from another website, also before save use it to check the format.");
        jToggleButton2.setContentAreaFilled(false);
        jToggleButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jToggleButton2MouseClicked(evt);
            }
        });
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, 80, -1));

        jToggleButton1.setFont(new java.awt.Font("Bookman Old Style", 3, 21)); // NOI18N
        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/Print with.gif"))); // NOI18N
        jToggleButton1.setToolTipText("Print the document black&white.");
        jToggleButton1.setContentAreaFilled(false);
        jToggleButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/onlynote/print with se.gif"))); // NOI18N
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 80, -1));

        jScrollPane3.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        HistNew.setBackground(new java.awt.Color(51, 51, 51));
        HistNew.setContentType("text/html"); // NOI18N
        HistNew.setFont(new java.awt.Font("Bookman Old Style", 1, 23)); // NOI18N
        HistNew.setForeground(new java.awt.Color(204, 204, 204));
        HistNew.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\"><b>\n      \n    </b></p>\n  </body>\n</html>\n");
        HistNew.setToolTipText("");
        HistNew.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                HistNewAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        HistNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HistNewMouseClicked(evt);
            }
        });
        HistNew.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HistNewKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                HistNewKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(HistNew);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 370));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 760, 460));
        Mouse IMove = new Mouse(this);
        addMouseListener(IMove);
        addMouseMotionListener(IMove);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitMouseClicked
        Save();
        iconbuttonzero.doClick();
        WindowEvent winclosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winclosingEvent);

    }//GEN-LAST:event_ExitMouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        Save();
        this.setState(JFrame.ICONIFIED);
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

    }//GEN-LAST:event_jLabel8MouseClicked

    private void jToggleButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton12ActionPerformed
        // TODO add your handling code here:
        HistNew.setText(null);

        Save();

        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

        //  Note- Symbols together mean with previous =. Ex. +* so with = you pressed *.
    }//GEN-LAST:event_jToggleButton12ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:

        Save();
        Font font = HistNew.getFont();
        float size = font.getSize() - 1.0f;
        HistNew.setFont(font.deriveFont(size));
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);
//Savecreate();

    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        Font font = HistNew.getFont();
        float size = font.getSize() + 1.0f;
        HistNew.setFont(font.deriveFont(size));
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);
//Savecreate();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

        MessageFormat header = new MessageFormat("Note");

        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        LookAndFeel previousLF = UIManager.getLookAndFeel();

        //     MessageFormat attr = new MessageFormat(a0.getText());
        try {
            //  Hist.print(JTextArea.PrintMode.NORMAL, header, footer);
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                UIDefaults defaul = new UIDefaults();
                defaul.put("EditorPane[Enabled].backgroundPainter", new java.awt.Color(255, 255, 255));
                HistNew.putClientProperty("Nimbus.Overrides", defaul);
                HistNew.putClientProperty("Nimbus.Overrides.InheritDefaults", true);
                HistNew.setBackground(new java.awt.Color(255, 255, 255));
                HistNew.setForeground(new java.awt.Color(0, 0, 0));

                HistNew.print(header, footer);

                UIManager.setLookAndFeel(previousLF);
            } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
            }

        } catch (PrinterException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        UIDefaults defaul = new UIDefaults();
        defaul.put("EditorPane[Enabled].backgroundPainter", new java.awt.Color(31, 31, 31));
        HistNew.putClientProperty("Nimbus.Overrides", defaul);
        HistNew.putClientProperty("Nimbus.Overrides.InheritDefaults", true);
        HistNew.setBackground(new java.awt.Color(31, 31, 31));
        HistNew.setForeground(new java.awt.Color(204, 204, 204));

        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void HeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HeMouseClicked

        Save();

    }//GEN-LAST:event_HeMouseClicked

    private void HeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HeMouseEntered

    }//GEN-LAST:event_HeMouseEntered

    int wh = 31;
    int he = 31;

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked

        String foldlocat = null;
        try {
            String selection = "1";
            String sql = "select * from SetAll where Lone ='" + selection + "' ";

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();
            if (rs.next()) {
                foldlocat = rs.getString("Folderlocat");

            }

        } catch (Exception e) {

        } finally {

            try {

                rs.close();
                pst.close();

            } catch (Exception e) {

            }
        }
//        if (stat == JFileChooser.APPROVE_OPTION) {
//            //  File curfile = dirchoose.getCurrentDirectory();
//            value1 = dirchoose.getCurrentDirectory().toString();
//            //String jTextField1Text=jTextField1.getText();
//        }

        try {
            JFileChooser chooser = new JFileChooser();
            LookAndFeel previousLF = UIManager.getLookAndFeel();
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                chooser.setDialogTitle("Image");
                chooser.getDialogTitle();
                chooser = new JFileChooser();

                UIManager.setLookAndFeel(previousLF);
            } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
            }
            int txo = getimage().length;
            chooser.showOpenDialog(this);
            File f = chooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            File newloact = new File(foldlocat + "//" + txo + ".gif");
//            JOptionPane.showMessageDialog(null, foldlocat + " " + newloact);

            BufferedImage img = ImageIO.read(f);

            //     Hist.setText(filename);
            JLabel label = new JLabel(new ImageIcon(img));
            ImageIcon tm = (ImageIcon) label.getIcon();
//            Image mg = tm.getImage().getScaledInstance(131, 131, Image.SCALE_SMOOTH);
            //    Hist.insertIcon(new ImageIcon(mg));
            label.setIcon(tm);
            Image im = tm.getImage();

            ImageIO.write(img, "gif", newloact);
            //   URI fl = chooser.getSelectedFile().toURI(); old
            URI fl = newloact.toURI();

            String s = "<html> <img src='" + fl + "' width='" + wh + "'height='" + he + "'> </img>";
            String test = HistNew.getText();
            //    HistNew.setText("<html> <img src='"+fl+"' width='131' height='131'> </img>");
            try {
                Document doc = HistNew.getDocument();

                doc.createPosition(doc.getLength());
                //    doc.insertString(doc.getLength(), s, null);
                //      HistNew.setText(test + s);
                insertHTML(HistNew, s, doc.getLength());

            } catch (BadLocationException exc) {
                exc.printStackTrace();
            }

            UIDefaults defaults = new UIDefaults();
            defaults.put("EditorPane[Enabled].backgroundPainter", new java.awt.Color(31, 31, 31));
            HistNew.putClientProperty("Nimbus.Overrides", defaults);
            HistNew.putClientProperty("Nimbus.Overrides.InheritDefaults", true);
            HistNew.setBackground(new java.awt.Color(31, 31, 31));

            SpellChecker.setUserDictionaryProvider(new FileUserDictionary());
            SpellChecker.registerDictionaries(this.getClass().getResource("/dictionary"), "en");
            SpellChecker.register(HistNew);

            SpellCheckerOptions sco = new SpellCheckerOptions();
            sco.setCaseSensitive(true);
            sco.setSuggestionsLimitMenu(10);
            JPopupMenu popup = SpellChecker.createCheckerPopup(sco);
            HistNew.addMouseListener(new PopupListener(popup));

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

    }//GEN-LAST:event_jLabel14MouseClicked

    int sol = 0;
    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        //     if(sol == 0){

        JFileChooser fs = new JFileChooser(new File("c:/document/"));
        fs.setDialogTitle("Save");
        LookAndFeel previousLF = UIManager.getLookAndFeel();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            fs = new JFileChooser();
            UIManager.setLookAndFeel(previousLF);
        } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
        }

        int result = fs.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String content = HistNew.getText();
            //    content.replace(" ", "&nbsp");
            File fi = fs.getSelectedFile();
            fi = new File(fs.getSelectedFile() + ".Nice1");//need to selct software for icon help form
            HTMLEditorKit kit
                    = (HTMLEditorKit) HistNew.getEditorKit();
            URI fl = fi.toURI();
            //   String cont = content.replace(" ", "&#160;");
//String cont = HistNew.getText().replace(" ","&nbsp;").replace("\t","&#09;");
//String cont = HistNew.getText().replace("\t","&#09;");

//            StringReader reader = new StringReader(HistNew.getText());
            // kit.read(reader, doc, location);
//            StringWriter writer = new StringWriter();
            try {
                // Document doc = HistNew.getDocument();
                //  DocumentFilter dc = (DocumentFilter) HistNew.getDocument();

//writer.write(reader.toString(), HistNew.getCaretPosition(), doc.getLength());
//                insertHTML(HistNew, s, doc.getLength());
                FileWriter fw = new FileWriter(fi.getPath());
                //   ImageIO.write(content, fi);
                //    kit.write(writer, doc, HistNew.getX(), doc.getLength());
//                org.jsoup.nodes.Document doc = Jsoup.parse(content);
//
//                doc.outputSettings(new org.jsoup.nodes.Document.OutputSettings().prettyPrint(false));
//                Parser parser = Parser.htmlParser();
//                parser.settings(new ParseSettings(true, true));
//                doc = parser.parseInput(content, fl.toString());
//
//                String outst = doc.body().html();

//doc.outputSettings().indentAmount(0).prettyPrint(false);
                // String sto = html2text(outst);
                fw.write(content);
                fw.flush();
                fw.close();

            } catch (IOException ex) {
                Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
                //} catch (BadLocationException ex) {
                //   Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//newopen();
        //  newopen();
//            File fi = fs.getSelectedFile();
//
//        FileReader reader = null;
//        try {
//            reader = new FileReader(fi);
//            //    HTMLEditorKit kit = new HTMLEditorKit();
//            //  Document doc = reader;
//            //    StringReader read = new StringReader(filename);
//
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        BufferedReader br = new BufferedReader(reader);
//
//        try {
//            HistNew.read(br, null);
//
//            //        HistNew.setPage(fl.toURL());
//        } catch (IOException ex) {
//            Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        try {
//            br.close();
//        } catch (IOException ex) {
//            Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        HistNew.requestFocus();
//}
//       else{
//        JFileChooser fs = new JFileChooser(new File("c:/document/"));
//        fs.setDialogTitle("Save");
//        LookAndFeel previousL = UIManager.getLookAndFeel();
//        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//            fs = new JFileChooser();
//            UIManager.setLookAndFeel(previousL);
//        } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
//        }
//       
//        int su = fs.showSaveDialog(null); 
//        if (su == JFileChooser.APPROVE_OPTION) {
//            String content = HistNew.getText();
//            //    content.replace(" ", "&nbsp");
//            File fis = fs.getSelectedFile();
//            fis = new File(fs.getSelectedFile() + ".Nice1");//need to selct software for icon help form
//            HTMLEditorKit kit
//                    = (HTMLEditorKit) HistNew.getEditorKit();
//            //    URI fl = HistNew.getCaret().toURI();
//         //   String cont = content.replace(" ", "&nbsp;");
        ////String cont = HistNew.getText()
////               .replace(" ","&nbsp;")
////                .replace("\t","&#09;");
//
////            StringReader reader = new StringReader(HistNew.getText());
//            // kit.read(reader, doc, location);
////            StringWriter writer = new StringWriter();
//
//            try {
//                //        Document doc = HistNew.getDocument();
//                //  DocumentFilter dc = (DocumentFilter) HistNew.getDocument();
//
////writer.write(reader.toString(), HistNew.getCaretPosition(), doc.getLength());
////                insertHTML(HistNew, s, doc.getLength());
//                FileWriter fw = new FileWriter(fis.getPath());
//                //   ImageIO.write(content, fi);
//                //    kit.write(writer, doc, HistNew.getX(), doc.getLength());
//
//             
//                fw.write(content);
//                fw.flush();
//                fw.close();
//
//            } catch (IOException ex) {
//                Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//                //} catch (BadLocationException ex) {
//                //   Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        HistNew.getDocument().putProperty("IgnoreCharsetDirective", Boolean.TRUE);

        JFileChooser chooser = new JFileChooser();

        LookAndFeel previousLF = UIManager.getLookAndFeel();

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            chooser = new JFileChooser();
            UIManager.setLookAndFeel(previousLF);
        } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
        }
        //  newopen();
        chooser.showOpenDialog(this);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        URI fl = chooser.getSelectedFile().toURI();
//try (Reader myReader = new BufferedReader(new FileReader(filename))) {
//    
//    HistNew.read(myReader, null);
//} catch (IOException ex) {
//        ex.printStackTrace();
//
//}

        FileReader reader = null;
        try {
            reader = new FileReader(filename);
            //    HTMLEditorKit kit = new HTMLEditorKit();
            //  Document doc = reader;
            //    StringReader read = new StringReader(filename);

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(reader);

        try {
            HistNew.read(br, null);

            //        HistNew.setPage(fl.toURL());
        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        HistNew.requestFocus();
//          Plus_Calc_Hist_AllBill so = new Plus_Calc_Hist_AllBill();
//      so.setVisible(true);
//      Close();

//        String st = HistNew.getText();
//        String newst = st.replace("-", " ");
        //  HistNew.setText(newst);
        HistNew.getDocument().putProperty("IgnoreCharsetDirective", Boolean.TRUE);

        try {
            SpellChecker.setUserDictionaryProvider(new FileUserDictionary());
            SpellChecker.registerDictionaries(this.getClass().getResource("/dictionary"), "en");
            SpellChecker.register(HistNew);

            SpellCheckerOptions sco = new SpellCheckerOptions();
            sco.setCaseSensitive(true);
            sco.setSuggestionsLimitMenu(10);
            JPopupMenu popup = SpellChecker.createCheckerPopup(sco);
            HistNew.addMouseListener(new PopupListener(popup));
        } catch (Exception ex) {

        }
        undo();
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

    }//GEN-LAST:event_jLabel11MouseClicked

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        int js = Integer.parseInt(jSpinner1.getValue().toString());
        wh = js;
        // Size1.setText(String.valueOf(wh));
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        int js = Integer.parseInt(jSpinner2.getValue().toString());
        he = js;
        //  Size.setText(String.valueOf(he));

    }//GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSpinner1AncestorAdded
        JComponent editor = jSpinner1.getEditor();

//JComponent editor = A1numdown.getEditor();
        int c = editor.getComponentCount();
        for (int i = 0; i < c; i++) {
            final Component comp = editor.getComponent(i);
            if (comp instanceof JTextComponent) {
                ((JTextComponent) comp).setUI(new SynthFormattedTextFieldUI() {
                    protected void paint(javax.swing.plaf.synth.SynthContext context, java.awt.Graphics g) {
                        g.setColor(new java.awt.Color(23, 23, 23));
                        g.fillRect(3, 3, getComponent().getWidth() - 3, getComponent().getHeight() - 6);
                        super.paint(context, g);
                    }
                ;
            }

        
        );
    }
}
int n = editor.getComponentCount();
        for (int i = 0; i < n; i++) {

            Component o = editor.getComponent(i);
            if (o instanceof JTextField) {
                editor.setBackground(new java.awt.Color(1, 117, 29));
                o.setBackground(Color.BLUE);
                o.setForeground(new java.awt.Color(204, 255, 255));

                //   UIManager.put("inactiveCaption", Color.GRAY.darker());
            }
        }

    }//GEN-LAST:event_jSpinner1AncestorAdded

    private void jSpinner2AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jSpinner2AncestorAdded
        JComponent editor = jSpinner2.getEditor();

//JComponent editor = A1numdown.getEditor();
        int c = editor.getComponentCount();
        for (int i = 0; i < c; i++) {
            final Component comp = editor.getComponent(i);
            if (comp instanceof JTextComponent) {
                ((JTextComponent) comp).setUI(new SynthFormattedTextFieldUI() {
                    protected void paint(javax.swing.plaf.synth.SynthContext context, java.awt.Graphics g) {
                        g.setColor(new java.awt.Color(23, 23, 23));
                        g.fillRect(3, 3, getComponent().getWidth() - 3, getComponent().getHeight() - 6);
                        super.paint(context, g);
                    }
                ;
            }

        
        );
    }
}
int n = editor.getComponentCount();
        for (int i = 0; i < n; i++) {

            Component o = editor.getComponent(i);
            if (o instanceof JTextField) {
                editor.setBackground(new java.awt.Color(1, 117, 29));
                o.setBackground(Color.BLUE);
                o.setForeground(new java.awt.Color(204, 255, 255));

                //   UIManager.put("inactiveCaption", Color.GRAY.darker());
            }
        }

    }//GEN-LAST:event_jSpinner2AncestorAdded
    int aso = 0;
    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        if (aso == -1) {
            jSpinner2.setVisible(false);
            jSpinner1.setVisible(false);
            Size1.setVisible(false);
            Size.setVisible(false);

            aso = 0;
        } else if (aso == 0) {
            jSpinner2.setVisible(true);
            jSpinner1.setVisible(true);
            Size1.setVisible(true);
            Size.setVisible(true);

            aso = -1;
        }
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jButton1.isSelected()) {
            jScrollPane1.setVisible(false);
            jButton1.setSelected(false);
        } else if (jButton1.isSelected() == false) {

            jScrollPane1.setVisible(true);
            jButton1.setSelected(true);

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    //   javax.swing.JTextField fto = new javax.swing.JTextField();
    private void HistNewAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_HistNewAncestorAdded
//        String foldlocat = null;
//        try {
//            String selection = "1";
//            String sql = "select * from SetAll where Lone ='" + selection + "' ";
//
//            pst = conn.prepareStatement(sql);
//
//            rs = pst.executeQuery();
//            if (rs.next()) {
//                foldlocat = rs.getString("NoteFont");
//
//            }
//
//        } catch (Exception e) {
//
//        } finally {
//
//            try {
//
//                rs.close();
//                pst.close();
//
//            } catch (Exception e) {
//
//            }
//        }
//        String latest = foldlocat;
//        String[] tx = latest.split(",");
//        String woname = tx[1].replace("name=", "");
//        String wostyle = tx[2].replace("style=", "");
//        String wosize = tx[3].replace("size=", "").replace("]", "");
//        //  Ch.setText(woname + "-" + wostyle + "-" + wosize);
//        FontDialog dialog = new FontDialog((Frame) this, "Font", true);
//        //   dialog.setSelectedFont(new java.awt.Font("Bookman Old Style", 1, 23));
//        dialog.setSelectedFont(Font.decode(woname + "-" + wostyle + "-" + wosize));
//
//        //  java.awt.Font[family=Bauhaus 93,name=Bauhaus 93,style=plain,size=22]
//        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
//
//        HistNew.setFont(dialog.getSelectedFont());
        HistNew.getDocument().putProperty("IgnoreCharsetDirective", Boolean.TRUE);

        try {
            SpellChecker.setUserDictionaryProvider(new FileUserDictionary());
            SpellChecker.registerDictionaries(this.getClass().getResource("/dictionary"), "en");
            SpellChecker.register(HistNew);

            SpellCheckerOptions sco = new SpellCheckerOptions();
            sco.setCaseSensitive(true);
            sco.setSuggestionsLimitMenu(10);
            JPopupMenu popup = SpellChecker.createCheckerPopup(sco);
            HistNew.addMouseListener(new PopupListener(popup));
        } catch (Exception ex) {

        }
        undo();
        //     HistNew = makeEditorPane(new ImgBaselineHTMLEditorKit());

    }//GEN-LAST:event_HistNewAncestorAdded

    private void HistNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HistNewMouseClicked
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);
    }//GEN-LAST:event_HistNewMouseClicked

    private void HistNewKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HistNewKeyReleased

    }//GEN-LAST:event_HistNewKeyReleased

    private void HistNewKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HistNewKeyPressed
//                KeyboardFocusManager.getCurrentKeyboardFocusManager() // nec to keywords
//  .addKeyEventDispatcher((KeyEvent e) -> {
//      char ch =  e.getKeyChar();
//      String st = String.valueOf(ch);
//      jEditorPane1.setText(jEditorPane1.getText() + st);
//      
//      return false;
//        });        

        //  if(evt.getKeyCode() == KeyEvent.VK_SPACE){
        //           String stm = HistNew.getText().replace(" ", "&#160");
        //  String stm = jEditorPane1.getText() + "-";
        //       String stm = HistNew.getText().replace(" ", "-");
        //    jEditorPane1.setText(stm);
        //    }

    }//GEN-LAST:event_HistNewKeyPressed

    private void JLabImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLabImgMouseClicked
// DirectoryChooser directoryChooser = new DirectoryChooser();
//directoryChooser.setInitialDirectory(new File("c://document"));
//javafx.stage.Window window = null;
//Stage stage = null;
//    try {
//        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("view/GenderPopup.fxml"));
        ////        Parent root = (Parent) fxmlLoader.load();
//        Scene scene = new Scene();
//        stage = new Stage();
//        stage.setScene(scene);
//        stage.show();
//} catch (IOException e) {
//    e.printStackTrace();
//  }
//
//   File selectedDirectory = directoryChooser.showDialog(stage);
//
// String loca = selectedDirectory.getAbsolutePath();
        File selectedFile = null;
        String value1 = "";
        LookAndFeel previousLF = UIManager.getLookAndFeel();
        JFileChooser dirchoose = null;
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            dirchoose = new JFileChooser();
            dirchoose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            dirchoose.setAcceptAllFileFilterUsed(false);
//dirchoose.setCurrentDirectory(new java.io.File("."));

            UIManager.setLookAndFeel(previousLF);
        } catch (IllegalAccessException | UnsupportedLookAndFeelException | InstantiationException | ClassNotFoundException e) {
        }

        //dirchoose.setCurrentDirectory("c://document");
        //      String directory = dirchoose.getCurrentDirectory().toString();
        int stat = dirchoose.showOpenDialog(this);
        if (stat == JFileChooser.APPROVE_OPTION) {
            //  File curfile = dirchoose.getCurrentDirectory();
            value1 = dirchoose.getSelectedFile().toString();
            //String jTextField1Text=jTextField1.getText();
        }

        try {
            String value0 = "1";

            // value1 = loca;
            // pst.setBytes(person_image);
            String sqltest = "update SetAll set Folderlocat='" + value1 + "' where Lone='" + value0 + "' ";

            //    String sql = "update Small_Atten set Lone='" + value1 + "' ,Name='" + value2 + "' ,Presentmonth='" + value3 + "' ,Presentyear='" + value4 + "' ,Salarynow='" + value5 + "' ,Absentmonth='" + value6 + "' ,Absentyear='" + value7 + "' where Lone='" + value1 + "' ";
            pst = conn.prepareStatement(sqltest);
            pst.execute();
            //  JOptionPane.showMessageDialog(null, "Amended.");

        } catch (Exception E) {
            JOptionPane.showMessageDialog(null, E);
        }

    }//GEN-LAST:event_JLabImgMouseClicked

    private void jLabel10AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel10AncestorAdded
        jSpinner2.setVisible(true);
        jSpinner1.setVisible(true);
        Size1.setVisible(true);
        Size.setVisible(true);
        aso = -1;
    }//GEN-LAST:event_jLabel10AncestorAdded

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

        org.jsoup.nodes.Document doc = Jsoup.parse(HistNew.getText());

        doc.outputSettings(new org.jsoup.nodes.Document.OutputSettings().prettyPrint(true));
        Parser parser = Parser.htmlParser();
        parser.settings(new ParseSettings(true, true));
        //  doc = parser.parseInput(content, fl.toString());
        String outst = doc.body().html();
        Whitelist whitelist = Whitelist.basicWithImages();

// Clean the document.
        doc = new Cleaner(Whitelist.basicWithImages()).clean(doc);

        Whitelist customwhitelist1 = new Whitelist();
//editor, String html, int location
        customwhitelist1.addTags("br");
        customwhitelist1.addAttributes("img", "src", "alt", "width", "height", "html", "p", "/p", "&#160;", "br");
//String final = Jsoup.clean(outst, customwhitelist1);

        String ss = Jsoup.clean(outst, customwhitelist1);

// Adjust escape mode
        doc.outputSettings().escapeMode(EscapeMode.xhtml);

// Get back the string of the body.
        String sts = doc.body().html();
        String tx = html2text(HistNew.getText());
        HistNew.setText(ss);

    }//GEN-LAST:event_jToggleButton2ActionPerformed


    private void jToggleButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton2MouseClicked

    }//GEN-LAST:event_jToggleButton2MouseClicked

    private void jToggleButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton3MouseClicked

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

        Document doc = HistNew.getDocument();
        String s = "&#160;";
        // String stm = “␈”;
        String so = "<br>";
        // (U+2408)

        //    String sto = html2text(s);
        //   Document doc =
        try {
            // try {
            //    doc.insertString(doc.getLength(), s, null);
            insertHTML(HistNew, so, HistNew.getCaretPosition());
            //    insertHTML(HistNew, stm, HistNew.getCaretPosition());
            int loca = HistNew.getCaretPosition();

            //  Save();
            //  Open();
            HistNew.setCaretPosition(loca);

//            Runnable doRun = new Runnable() {
//
//                @Override
//                public void run() {
//                    HistNew.grabFocus();
//                    HistNew.requestFocus();
//                    HistNew.setText(HistNew.getText());
//                    HistNew.setCaretPosition(loca);
//
//                    //  HistNew.selectAll();
//                    //  formTextFieldFocus1();
//                }
//            };
//            SwingUtilities.invokeLater(doRun);
            // HistNew.setFocusable(HistNew.getFocusListeners());
            HistNew.requestFocus();

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jToggleButton4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton4MouseClicked

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

        Document doc = HistNew.getDocument();
        String s = "&#160;";
        // String stm = “␈”;
        String sl = "&#160;";

        try {
            insertHTML(HistNew, sl, HistNew.getCaretPosition());

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

//            //    insertHTML(HistNew, stm, HistNew.getCaretPosition());
//
        int loca = HistNew.getCaretPosition() - 1;
        Save();

        Open();

        Runnable doRun = new Runnable() {

            @Override
            public void run() {
                HistNew.grabFocus();
                HistNew.requestFocus();
                HistNew.setText(HistNew.getText());
                HistNew.setCaretPosition(loca);
                //  HistNew.selectAll();
                //  formTextFieldFocus1();
            }
        };
        SwingUtilities.invokeLater(doRun);
//        } catch (IOException ex) {
//            Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void JLabImg1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLabImg1MouseClicked

        // HistNew = new JTextArea();
        //    FontDialog.showDialog(HistNew);
        String value00 = null;
        FontDialog ft = new FontDialog((Frame) this, "Font Nice Application 1", true);
        ft.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        ft.setLocationRelativeTo(ft);
        ft.setBackground(new java.awt.Color(31, 32, 32));
        ft.setVisible(true);
        if (!ft.isCancelSelected()) {
            HistNew.setFont(ft.getSelectedFont());
            ft.getSelectedFont();
            //  value00 = ft.getSelectedFont().toString();
            value00 = ft.getSelectedFont().toString();
            try {
                String value0 = "1";

                // value1 = loca;
                // pst.setBytes(person_image);
                String sqltest = "update SetAll set NoteFont='" + value00 + "' where Lone='" + value0 + "' ";

                //    String sql = "update Small_Atten set Lone='" + value1 + "' ,Name='" + value2 + "' ,Presentmonth='" + value3 + "' ,Presentyear='" + value4 + "' ,Salarynow='" + value5 + "' ,Absentmonth='" + value6 + "' ,Absentyear='" + value7 + "' where Lone='" + value1 + "' ";
                pst = conn.prepareStatement(sqltest);
                pst.execute();
                //  JOptionPane.showMessageDialog(null, "Amended.");

            } catch (Exception E) {
                JOptionPane.showMessageDialog(null, E);
            }
        }
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);
        undo();

// String foldlocat = null;
//        try {
//            String selection = "1";
//            String sql = "select * from SetAll where Lone ='" + selection + "' ";
//
//            pst = conn.prepareStatement(sql);
//
//            rs = pst.executeQuery();
//            if (rs.next()) {
//                foldlocat = rs.getString("Folderlocat");
//
//            }
//
//        } catch (Exception e) {
//
//        } finally {
//
//            try {
//
//                rs.close();
//                pst.close();
//
//            } catch (Exception e) {
//
//            }
//        }
    }//GEN-LAST:event_JLabImg1MouseClicked

    private void JLabImg2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLabImg2MouseClicked
        jScrollPane1.setVisible(false);
        jButton1.setSelected(false);

        HistNew.requestFocus();
        try {
            Robot bot = new Robot();
            bot.keyPress(KeyEvent.VK_CONTROL);
            bot.keyPress(KeyEvent.VK_Z);
            bot.keyRelease(KeyEvent.VK_CONTROL);
            bot.keyRelease(KeyEvent.VK_Z);

        } catch (AWTException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_JLabImg2MouseClicked

    private void ExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitMouseEntered
        Exit.setForeground(new java.awt.Color(255, 0, 0));

    }//GEN-LAST:event_ExitMouseEntered

    private void ExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ExitMouseExited
        Exit.setForeground(new java.awt.Color(204, 204, 204));

    }//GEN-LAST:event_ExitMouseExited

    private void StarAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_StarAncestorAdded
        ImageIcon image0 = (ImageIcon) Star.getIcon();
        Image igs0 = image0.getImage().getScaledInstance(Star.getWidth(), Star.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon images0 = new ImageIcon(igs0);
        Star.setIcon(images0);
    }//GEN-LAST:event_StarAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Note.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Note().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Comment;
    private javax.swing.JLabel Exit;
    private javax.swing.JLabel He;
    private javax.swing.JEditorPane HistNew;
    private javax.swing.JLabel JLabImg;
    private javax.swing.JLabel JLabImg1;
    private javax.swing.JLabel JLabImg2;
    private javax.swing.JLabel Size;
    private javax.swing.JLabel Size1;
    private javax.swing.JButton Star;
    private javax.swing.JLabel ToIcon;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton12;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables
javax.swing.JTable jt = new javax.swing.JTable();

    private void fetch() {
        try {
            String sql = "select * from SetAll";

            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            jt.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);

        }

    }

    private void Open() {

        try {

            String filePath = "C:\\Alan\\Note\\AllBill.Nice1";
            File file = new File(filePath);
            if (!file.exists()) {
                file.getParentFile().mkdirs();
                file.createNewFile();
            } else {
//            FileOutputStream so = new FileOutputStream(filePath);
//            so.write(("").getBytes());
//            so.close();
            }
            file.getAbsoluteFile();
            //    File f = choos.getSelectedFile();
            //     String filePath = f.getAbsolutePath();

            FileReader reader = null;
//                URI fi = file.toURI();
            try {
                reader = new FileReader(file);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader b = new BufferedReader(reader);

            HistNew.read(b, null);
            try {
                b.close();
            } catch (IOException ex) {
                Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
            }
            HistNew.requestFocus();

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void Save() {
        String filePath = "C:\\Alan\\Note\\AllBill.Nice1";
        File file = new File(filePath);

        String content = HistNew.getText();
        //    File fi = fs.getSelectedFile();
        try {
            FileWriter fw = new FileWriter(filePath);
            fw.write(content);
            fw.flush();
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        //  JOptionPane.showMessageDialog(rootPane, file);
        //     Comment.setText("Saved");
        //  JOptionPane.showMessageDialog(rootPane, file);
        //     Comment.setText("Saved");

    }

    private void newopen() {

        String filename = "C:\\Alan\\Note\\AllBill.Nice1";

        File file = new File(filename);

        String content = HistNew.getText();
        //    content.replace(" ", "&nbsp");

        file = new File(filename);//need to selct software for icon help form

//            String cont = HistNew.getText()
//                .replace(" ","&nbsp;")
//                .replace("\t","&#09;");
        try {
            FileWriter fw = new FileWriter(filename);
            fw.write(content);
            fw.flush();
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
            //} catch (BadLocationException ex) {
            //   Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        //  HistNew.setText("");
        //  HistNew.setText("");

//      Plus_Calc_Hist_AllBill so = new Plus_Calc_Hist_AllBill();
//      so.setVisible(true);
//      Close();
        FileReader reader = null;

        try {
            reader = new FileReader(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(reader);
        try {
            HistNew.read(br, null);
        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        HistNew.requestFocus();

    }

    private void Close() {

        Save();

        WindowEvent winclosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winclosingEvent);

    }

    public void Icon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Newiconlatestnew.png")));
    }

    private void insertHTML(JEditorPane editor, String html, int location)
            throws IOException {
        try {
            //assumes editor is already set to "text/html" type
            HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
            Document doc = editor.getDocument();
            StringReader reader = new StringReader(html);

            kit.read(reader, doc, location);

//                try {
//        boolean start = location>0 ? !editor.getText(location-1, 1).equals("\n") : false;
//        Position p = editor.getDocument().createPosition(location);
//       // HTMLDocument docs = (HTMLDocument) editor.getDocument(); 
//        new HTMLEditorKit().read(new StringReader(html), (HTMLDocument)editor.getDocument(), location);
//        if(start) {editor.getDocument().remove(location, 1);}
//        if(location>0) {editor.getDocument().remove(p.getOffset()-1, 1);}
//    } catch (BadLocationException ex) {
//        Logger.getLogger(Plus_Calc_Hist_AllBill.class.getName()).log(Level.SEVERE, null, ex);
//    }
        } catch (BadLocationException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    int size = 9;
    javax.swing.JTextField Siz = new javax.swing.JTextField();

    private void Opensa() {
        String filePath = "C:\\Alan\\Small Home Business/SumAll.Nice1Sys";
        File file = new File(filePath);
        //    File f = choos.getSelectedFile();
        //     String filePath = f.getAbsolutePath();

        FileReader reader = null;

        try {
            reader = new FileReader(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(reader);
        try {
            Siz.read(br, null);
        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        Siz.requestFocus();

        String lo = Siz.getText();
        String[] lon = lo.split("$$ ");  //size-Image folder
        String one = lon[0];

        int st = Integer.parseInt(one);
        Font font = HistNew.getFont();
        float sizes = st;
        HistNew.setFont(font.deriveFont(sizes));

    }

    private void Savecreate() {
        Font font = HistNew.getFont();
        float size = font.getSize();
        String al = String.valueOf(size);
        String lo = Siz.getText();
        String[] lon = lo.split("$$ ");  //size-Image folder

        String one = lon[1];

        //size-folder
        String almain = "al" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ " + "" + "$$ ";
        String filePath = "C:\\Alan\\Small Home Business/SumAll.Nice1Sys";
        File file = new File(filePath);
        //  Siz.setText("9");
        String content = Siz.getText();
        //    File fi = fs.getSelectedFile();
        try {
            FileWriter fw = new FileWriter(filePath);
            fw.write(one);
            fw.flush();
            fw.close();

        } catch (IOException ex) {
            Logger.getLogger(Note.class.getName()).log(Level.SEVERE, null, ex);
        }
        //  JOptionPane.showMessageDialog(rootPane, file);
        //     Comment.setText("Saved");
        //  JOptionPane.showMessageDialog(rootPane, file);
        //     Comment.setText("Saved");

    }

    public void undo() {

        UndoManager undoManager;
        undoManager = new UndoManager();
        Document docs = HistNew.getDocument();
        docs.addUndoableEditListener((UndoableEditEvent e) -> {
            //  System.out.println("Add edit");
            undoManager.addEdit(e.getEdit());
        });

        InputMap im = HistNew.getInputMap(JComponent.WHEN_FOCUSED);
        ActionMap am = HistNew.getActionMap();

//        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
//        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx()), "Undo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMaskEx()), "Redo");

        am.put("Undo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManager.canUndo()) {
                        undoManager.undo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace();
                }
            }
        });
        am.put("Redo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (undoManager.canRedo()) {
                        undoManager.redo();
                    }
                } catch (CannotUndoException exp) {
                    exp.printStackTrace();
                }
            }
        });

    }

    javax.swing.JButton iconbuttonzero = new javax.swing.JButton();

    public void Iconmethod(javax.swing.JButton iconla) {

        iconbuttonzero = iconla;

    }

    public static String html2text(String html) {
        return Jsoup.parse(html).text();

//        return Jsoup.clean(html);
    }

    public static String getText(org.jsoup.nodes.Element cell) {
        String text = null;

        List<Node> childNodes = cell.childNodes();
        if (childNodes.size() > 0) {
            Node childNode = childNodes.get(0);
            if (childNode instanceof TextNode) {
                text = ((TextNode) childNode).getWholeText();
            }
        }
        if (text == null) {
            text = cell.text();
        }
        return text;
    }


    public String[] getimage() {
        String foldlocat = null;
        try {
            String selection = "1";
            String sql = "select * from SetAll where Lone ='" + selection + "' ";

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();
            if (rs.next()) {
                foldlocat = rs.getString("Folderlocat");

            }

        } catch (Exception e) {

        } finally {

            try {

                rs.close();
                pst.close();

            } catch (Exception e) {

            }
        }

        File aFile = new File("/" + foldlocat + "/");

        //   String[] Listnm = aFile.list();
        File[] listOfFiles = aFile.listFiles();
        Nice_Application_1.NumberFileDotList as = new Nice_Application_1.NumberFileDotList();
        Arrays.sort(listOfFiles, as);

        String[] fileNames = new String[listOfFiles.length];
        for (int i = 0; i < listOfFiles.length; i++) {
            fileNames[i] = listOfFiles[i].getName();

        }

        return fileNames;

    }

    public void showimage(int indix) {

        int tsl = getimage().length - 1;

        String[] Listnm = getimage();

        String imagename = Listnm[indix];
        ImageIcon icon = new ImageIcon("/C:\\Alan\\Bill\\IMG\\BillFirst/" + imagename);

        Image img = icon.getImage().getScaledInstance(He.getWidth(), He.getHeight(), Image.SCALE_SMOOTH);

        //   jLabel2.setIcon(new ImageIcon(img));
    }

    public void setloadfont() {
        String foldlocat = null;
        try {
            String selection = "1";
            String sql = "select * from SetAll where Lone ='" + selection + "' ";

            pst = conn.prepareStatement(sql);

            rs = pst.executeQuery();
            if (rs.next()) {
                foldlocat = rs.getString("NoteFont");

            }

        } catch (Exception e) {

        } finally {

            try {

                rs.close();
                pst.close();

            } catch (Exception e) {

            }
        }
        String latest = foldlocat;
        String[] tx = latest.split(",");
        String woname = tx[1].replace("name=", "");
        String wostyle = tx[2].replace("style=", "");
        String wosize = tx[3].replace("size=", "").replace("]", "");
        //  Ch.setText(woname + "-" + wostyle + "-" + wosize);
        FontDialog dialog = new FontDialog((Frame) this, "Font", true);
        //   dialog.setSelectedFont(new java.awt.Font("Bookman Old Style", 1, 23));
        dialog.setSelectedFont(Font.decode(woname + "-" + wostyle + "-" + wosize));

        //  java.awt.Font[family=Bauhaus 93,name=Bauhaus 93,style=plain,size=22]
        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        HistNew.setFont(dialog.getSelectedFont());

    }
    
    public void heading(String hes){
      He.setText(hes);
    }
    public void IconToYourCompanyGetResourcePath(String hes){
      ToIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(hes)));
    }
    public void ScreenYourCompanyIconGetResourcePath(String hes) {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(hes)));
    }
    
}
